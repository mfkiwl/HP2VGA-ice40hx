
HP2VGA_ATTiny87.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000230  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800146  00800146  0000030a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bae  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a5  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f3  00000000  00000000  00001833  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000329  00000000  00000000  000023fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002726  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e0 e3       	ldi	r30, 0x30	; 48
  3c:	f2 e0       	ldi	r31, 0x02	; 2
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a6 34       	cpi	r26, 0x46	; 70
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	a6 e4       	ldi	r26, 0x46	; 70
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a7 34       	cpi	r26, 0x47	; 71
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	08 d0       	rcall	.+16     	; 0x6c <main>
  5c:	e7 c0       	rjmp	.+462    	; 0x22c <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <TVP_RESET>:
    }
}

void TVP_RESET(bool enable)
{
	if(enable)
  60:	88 23       	and	r24, r24
  62:	11 f0       	breq	.+4      	; 0x68 <TVP_RESET+0x8>
	{
		PORTB &= ~0x20; //Put TVP into reset
  64:	2d 98       	cbi	0x05, 5	; 5
		return;
  66:	08 95       	ret
	}
	PORTB |= 0x20; //Bring TVP out of reset
  68:	2d 9a       	sbi	0x05, 5	; 5
  6a:	08 95       	ret

0000006c <main>:

uint8_t msg_w_phase[3] = {TVP_W,TVP_HPLL_PHASE, 0x01};
uint8_t msg_r_chiprev[4] = {TVP_W,TVP_CHIP_REV,TVP_R, 0xFF};

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	sei();
  76:	78 94       	sei
	//DDRB |= 0x08; //Set FPGA_FB1 as output (PB3)
	DDRB |= 0x20; //Set TVP_RESET as output (PB5)
  78:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 0x40; //Set TVP_PWDN as output (PB6)
  7a:	26 9a       	sbi	0x04, 6	; 4
	PORTB |= 0x05; //Set SDA and SCL as outputs (PB0/PB2)
  7c:	85 b1       	in	r24, 0x05	; 5
  7e:	85 60       	ori	r24, 0x05	; 5
  80:	85 b9       	out	0x05, r24	; 5
	//DDRA |= 0x01; //Set FPGA_RESET as output (PA0)

	TVP_RESET(true); //Put TVP into reset
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	ed df       	rcall	.-38     	; 0x60 <TVP_RESET>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	89 e6       	ldi	r24, 0x69	; 105
  8a:	98 e1       	ldi	r25, 0x18	; 24
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
	//PORTA &= ~0x01; //Put the FPGA into reset
	
	_delay_ms(1000); //(TVP must be held in reset for 5ms after power up)
	
	TVP_RESET(false); //Bring TVP out of reset
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	e2 df       	rcall	.-60     	; 0x60 <TVP_RESET>
  9c:	ef ef       	ldi	r30, 0xFF	; 255
  9e:	f0 e7       	ldi	r31, 0x70	; 112
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	e1 50       	subi	r30, 0x01	; 1
  a4:	f0 40       	sbci	r31, 0x00	; 0
  a6:	20 40       	sbci	r18, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
	//PORTA |= 0x01; //Bring FPGA back out of reset	
	
	_delay_ms(100); //No I2C traffic for 1us after reset is released
	//TVP_PWDN(true); // Put TVP into power down
    
	usiTwiMasterInitialize();
  ae:	48 d0       	rcall	.+144    	; 0x140 <usiTwiMasterInitialize>
	usiTwiStartTransceiverWithData(reg_setting, 66);
  b0:	62 e4       	ldi	r22, 0x42	; 66
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	52 d0       	rcall	.+164    	; 0x15c <usiTwiStartTransceiverWithData>
	uint8_t phase_options[2] = {0x11, 0x91};
  b8:	81 e1       	ldi	r24, 0x11	; 17
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	81 e9       	ldi	r24, 0x91	; 145
  be:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t selected_phase = 0;
  c0:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		_delay_ms(16);
		if((PINB & 0x02) == 0x02)
		{
			msg_w_phase[2] = phase_options[(selected_phase & 0x01)];
  c2:	0f 2e       	mov	r0, r31
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	cf 2e       	mov	r12, r31
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	df 2e       	mov	r13, r31
  cc:	f0 2d       	mov	r31, r0
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	9c e7       	ldi	r25, 0x7C	; 124
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x66>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
	uint8_t phase_options[2] = {0x11, 0x91};
	uint8_t selected_phase = 0;
    while (1) 
    {
		_delay_ms(16);
		if((PINB & 0x02) == 0x02)
  da:	19 9b       	sbis	0x03, 1	; 3
  dc:	f8 cf       	rjmp	.-16     	; 0xce <main+0x62>
		{
			msg_w_phase[2] = phase_options[(selected_phase & 0x01)];
  de:	10 fb       	bst	r17, 0
  e0:	ee 24       	eor	r14, r14
  e2:	e0 f8       	bld	r14, 0
  e4:	f1 2c       	mov	r15, r1
  e6:	e1 e0       	ldi	r30, 0x01	; 1
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ec 0f       	add	r30, r28
  ec:	fd 1f       	adc	r31, r29
  ee:	ee 0d       	add	r30, r14
  f0:	ff 1d       	adc	r31, r15
  f2:	80 81       	ld	r24, Z
  f4:	f6 01       	movw	r30, r12
  f6:	82 83       	std	Z+2, r24	; 0x02
			selected_phase++;
  f8:	1f 5f       	subi	r17, 0xFF	; 255
			usiTwiStartTransceiverWithData(msg_w_phase, 3);
  fa:	63 e0       	ldi	r22, 0x03	; 3
  fc:	c6 01       	movw	r24, r12
  fe:	2e d0       	rcall	.+92     	; 0x15c <usiTwiStartTransceiverWithData>
 100:	e6 cf       	rjmp	.-52     	; 0xce <main+0x62>

00000102 <usiTwiMasterTransfer>:
)
{

  return errorState;  // Return error state.

} // end usiTwiGetStateInfo
 102:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
 106:	22 e0       	ldi	r18, 0x02	; 2
 108:	e8 eb       	ldi	r30, 0xB8	; 184
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	9b e2       	ldi	r25, 0x2B	; 43
 10e:	a9 eb       	ldi	r26, 0xB9	; 185
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	82 2f       	mov	r24, r18
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <usiTwiMasterTransfer+0x12>
 118:	90 83       	st	Z, r25
 11a:	1a 9b       	sbis	0x03, 2	; 3
 11c:	fe cf       	rjmp	.-4      	; 0x11a <usiTwiMasterTransfer+0x18>
 11e:	82 2f       	mov	r24, r18
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <usiTwiMasterTransfer+0x1e>
 124:	90 83       	st	Z, r25
 126:	8c 91       	ld	r24, X
 128:	86 ff       	sbrs	r24, 6
 12a:	f3 cf       	rjmp	.-26     	; 0x112 <usiTwiMasterTransfer+0x10>
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <usiTwiMasterTransfer+0x2c>
 132:	ea eb       	ldi	r30, 0xBA	; 186
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	9f ef       	ldi	r25, 0xFF	; 255
 13a:	90 83       	st	Z, r25
 13c:	20 9a       	sbi	0x04, 0	; 4
 13e:	08 95       	ret

00000140 <usiTwiMasterInitialize>:
 140:	28 9a       	sbi	0x05, 0	; 5
 142:	2a 9a       	sbi	0x05, 2	; 5
 144:	22 9a       	sbi	0x04, 2	; 4
 146:	20 9a       	sbi	0x04, 0	; 4
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__EEPROM_REGION_LENGTH__+0x7f00ba>
 14e:	8a e2       	ldi	r24, 0x2A	; 42
 150:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__EEPROM_REGION_LENGTH__+0x7f00b8>
 154:	80 ef       	ldi	r24, 0xF0	; 240
 156:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
 15a:	08 95       	ret

0000015c <usiTwiStartTransceiverWithData>:
bool
usiTwiStartTransceiverWithData(
  uint8_t *msg,
  uint8_t msgSize
)
{
 15c:	bf 92       	push	r11
 15e:	cf 92       	push	r12
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
 170:	16 2f       	mov	r17, r22
    // Prepare register value to: Clear flags, and
    ( 1 << USISIF ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC) |
    // set USI to shift 1 bit i.e. count 2 clock edges.
    ( 0xE << USICNT0 );

  errorState = 0;
 172:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
 176:	98 81       	ld	r25, Y
 178:	91 70       	andi	r25, 0x01	; 1
 17a:	c9 2e       	mov	r12, r25
  // The LSB in the address byte determines if is a masterRead or masterWrite
  // operation.
  masterWriteDataMode = ( *msg & ( 1 << TWI_READ_BIT ) ) ? false : true;

  // Release SCL to ensure that (repeated) Start can be performed
  PORT_USI |= ( 1 << PIN_USI_SCL );
 17c:	2a 9a       	sbi	0x05, 2	; 5

  // Verify that SCL becomes high.
  while ( !( PORT_USI & ( 1 << PIN_USI_SCL ) ) );
 17e:	2a 9b       	sbis	0x05, 2	; 5
 180:	fe cf       	rjmp	.-4      	; 0x17e <usiTwiStartTransceiverWithData+0x22>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 182:	92 e0       	ldi	r25, 0x02	; 2
 184:	89 2f       	mov	r24, r25
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <usiTwiStartTransceiverWithData+0x2a>
  // Delay for T2TWI if TWI_STANDARD_MODE
  _delay_loop_1( T2_TWI );
#endif

// Generate Start Condition
  PORT_USI &= ~( 1 << PIN_USI_SDA );  // Force SDA LOW.
 18a:	28 98       	cbi	0x05, 0	; 5
 18c:	89 2f       	mov	r24, r25
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <usiTwiStartTransceiverWithData+0x32>
  _delay_loop_1( T4_TWI );
  PORT_USI &= ~( 1 << PIN_USI_SCL );  // Pull SCL LOW.
 192:	2a 98       	cbi	0x05, 2	; 5
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <usiTwiStartTransceiverWithData+0x38>
  _delay_loop_1( T4_TWI );
  PORT_USI |= ( 1 << PIN_USI_SDA );   // Release SDA.
 198:	28 9a       	sbi	0x05, 0	; 5
    // set USI to shift 1 bit i.e. count 2 clock edges.
    ( 0xE << USICNT0 );

  errorState = 0;

  addressMode = true;
 19a:	01 e0       	ldi	r16, 0x01	; 1

    if ( addressMode || masterWriteDataMode )
    {
      // Write a byte
      PORT_USI &= ~( 1 << PIN_USI_SCL );          // Pull SCL LOW.
      USIDR = *(msg++);                           // Setup data.
 19c:	0f 2e       	mov	r0, r31
 19e:	fa eb       	ldi	r31, 0xBA	; 186
 1a0:	ef 2e       	mov	r14, r31
 1a2:	f1 2c       	mov	r15, r1
 1a4:	f0 2d       	mov	r31, r0

      // Prepare to generate ACK (or NACK in case of End Of Transmission)
      if ( msgSize == 1)
      {
        // Transmission of last byte was performed.
        USIDR = 0xFF;                           // Load NACK to confirm End Of
 1a6:	bb 24       	eor	r11, r11
 1a8:	ba 94       	dec	r11
 1aa:	d1 2c       	mov	r13, r1
  do
  {

    // If masterWrite cycle (or inital address tranmission)

    if ( addressMode || masterWriteDataMode )
 1ac:	01 11       	cpse	r16, r1
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <usiTwiStartTransceiverWithData+0x58>
 1b0:	c1 10       	cpse	r12, r1
 1b2:	14 c0       	rjmp	.+40     	; 0x1dc <usiTwiStartTransceiverWithData+0x80>
    {
      // Write a byte
      PORT_USI &= ~( 1 << PIN_USI_SCL );          // Pull SCL LOW.
 1b4:	2a 98       	cbi	0x05, 2	; 5
      USIDR = *(msg++);                           // Setup data.
 1b6:	88 81       	ld	r24, Y
 1b8:	f7 01       	movw	r30, r14
 1ba:	80 83       	st	Z, r24
      usiTwiMasterTransfer( tempUSISR_8bit );     // Send 8 bits on bus.
 1bc:	80 ef       	ldi	r24, 0xF0	; 240
 1be:	a1 df       	rcall	.-190    	; 0x102 <usiTwiMasterTransfer>
      
      // Clock and verify (N)ACK from slave
      DDR_USI &= ~( 1 << PIN_USI_SDA );          // Enable SDA as input.
 1c0:	20 98       	cbi	0x04, 0	; 4
      if ( usiTwiMasterTransfer( tempUSISR_1bit ) & ( 1 << TWI_NACK_BIT ) )
 1c2:	8e ef       	ldi	r24, 0xFE	; 254
 1c4:	9e df       	rcall	.-196    	; 0x102 <usiTwiMasterTransfer>
 1c6:	80 ff       	sbrs	r24, 0
 1c8:	16 c0       	rjmp	.+44     	; 0x1f6 <usiTwiStartTransceiverWithData+0x9a>
      {
        errorState = addressMode ?
 1ca:	01 11       	cpse	r16, r1
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <usiTwiStartTransceiverWithData+0x76>
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <usiTwiStartTransceiverWithData+0x78>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
             USI_TWI_NO_ACK_ON_ADDRESS :
             USI_TWI_NO_ACK_ON_DATA;
        return false;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	1e c0       	rjmp	.+60     	; 0x218 <usiTwiStartTransceiverWithData+0xbc>

    // Else masterRead cycle
    else
    {
      // Read a data byte
      DDR_USI &= ~( 1 << PIN_USI_SDA );          // Enable SDA as input.
 1dc:	20 98       	cbi	0x04, 0	; 4
      *(msg++) = usiTwiMasterTransfer( tempUSISR_8bit );
 1de:	80 ef       	ldi	r24, 0xF0	; 240
 1e0:	90 df       	rcall	.-224    	; 0x102 <usiTwiMasterTransfer>
 1e2:	88 83       	st	Y, r24

      // Prepare to generate ACK (or NACK in case of End Of Transmission)
      if ( msgSize == 1)
 1e4:	11 30       	cpi	r17, 0x01	; 1
 1e6:	19 f4       	brne	.+6      	; 0x1ee <usiTwiStartTransceiverWithData+0x92>
      {
        // Transmission of last byte was performed.
        USIDR = 0xFF;                           // Load NACK to confirm End Of
 1e8:	f7 01       	movw	r30, r14
 1ea:	b0 82       	st	Z, r11
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <usiTwiStartTransceiverWithData+0x96>
                                                // Transmission.
      }
      else
      {
        USIDR = 0x00;                          // Load ACK. Set data register
 1ee:	f7 01       	movw	r30, r14
 1f0:	10 82       	st	Z, r1
                                               // bit 7 (output for SDA) low.
      }
      // Generate ACK/NACK.
      usiTwiMasterTransfer( tempUSISR_1bit );
 1f2:	8e ef       	ldi	r24, 0xFE	; 254
 1f4:	86 df       	rcall	.-244    	; 0x102 <usiTwiMasterTransfer>
    }

  }
  while ( --msgSize );                         // Until all data sent/received.
 1f6:	11 50       	subi	r17, 0x01	; 1
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	0d 2d       	mov	r16, r13
 1fc:	11 11       	cpse	r17, r1
 1fe:	d6 cf       	rjmp	.-84     	; 0x1ac <usiTwiStartTransceiverWithData+0x50>
usiTwiMasterStop(
  void
)
{

  PORT_USI &= ~( 1 << PIN_USI_SDA );              // Pull SDA low.
 200:	28 98       	cbi	0x05, 0	; 5
  PORT_USI |= ( 1 << PIN_USI_SCL );               // Release SCL.
 202:	2a 9a       	sbi	0x05, 2	; 5
  while ( !( PIN_USI & ( 1 << PIN_USI_SCL ) ) );  // Wait for SCL to go high.
 204:	1a 9b       	sbis	0x03, 2	; 3
 206:	fe cf       	rjmp	.-4      	; 0x204 <usiTwiStartTransceiverWithData+0xa8>
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	98 2f       	mov	r25, r24
 20c:	9a 95       	dec	r25
 20e:	f1 f7       	brne	.-4      	; 0x20c <usiTwiStartTransceiverWithData+0xb0>
  _delay_loop_1( T4_TWI );
  PORT_USI |= ( 1 << PIN_USI_SDA );               // Release SDA.
 210:	28 9a       	sbi	0x05, 0	; 5
 212:	8a 95       	dec	r24
 214:	f1 f7       	brne	.-4      	; 0x212 <usiTwiStartTransceiverWithData+0xb6>
  while ( --msgSize );                         // Until all data sent/received.
  
  usiTwiMasterStop( );                         // Send a STOP condition on the TWI bus.

  /* Transmission successfully completed*/
  return true;
 216:	81 e0       	ldi	r24, 0x01	; 1

} // end usiTwiStartTransceiverWithData
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	df 90       	pop	r13
 226:	cf 90       	pop	r12
 228:	bf 90       	pop	r11
 22a:	08 95       	ret

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
