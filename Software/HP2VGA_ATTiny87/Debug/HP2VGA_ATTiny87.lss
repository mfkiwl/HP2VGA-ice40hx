
HP2VGA_ATTiny87.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800142  00800142  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b7d  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a5  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e7  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bf  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e6 ee       	ldi	r30, 0xE6	; 230
  3c:	f1 e0       	ldi	r31, 0x01	; 1
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a2 34       	cpi	r26, 0x42	; 66
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	21 e0       	ldi	r18, 0x01	; 1
  4c:	a2 e4       	ldi	r26, 0x42	; 66
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a3 34       	cpi	r26, 0x43	; 67
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	08 d0       	rcall	.+16     	; 0x6c <main>
  5c:	c2 c0       	rjmp	.+388    	; 0x1e2 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <TVP_RESET>:
    }
}

void TVP_RESET(bool enable)
{
	if(enable)
  60:	88 23       	and	r24, r24
  62:	11 f0       	breq	.+4      	; 0x68 <TVP_RESET+0x8>
	{
		PORTB &= ~0x20; //Put TVP into reset
  64:	2d 98       	cbi	0x05, 5	; 5
		return;
  66:	08 95       	ret
	}
	PORTB |= 0x20; //Bring TVP out of reset
  68:	2d 9a       	sbi	0x05, 5	; 5
  6a:	08 95       	ret

0000006c <main>:

uint8_t msg_r_chiprev[4] = {TVP_W,TVP_CHIP_REV,TVP_R, 0xFF};

int main(void)
{
	sei();
  6c:	78 94       	sei
	DDRB |= 0x08; //Set FPGA_FB1 as output (PB3)
  6e:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= 0x20; //Set TVP_RESET as output (PB5)
  70:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 0x40; //Set TVP_PWDN as output (PB6)
  72:	26 9a       	sbi	0x04, 6	; 4
	PORTB |= 0x05; //Set SDA and SCL as outputs (PB0/PB2)
  74:	85 b1       	in	r24, 0x05	; 5
  76:	85 60       	ori	r24, 0x05	; 5
  78:	85 b9       	out	0x05, r24	; 5
	//DDRA |= 0x01; //Set FPGA_RESET as output (PA0)

	TVP_RESET(true); //Put TVP into reset
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	f1 df       	rcall	.-30     	; 0x60 <TVP_RESET>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	89 e6       	ldi	r24, 0x69	; 105
  82:	98 e1       	ldi	r25, 0x18	; 24
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
	//PORTA &= ~0x01; //Put the FPGA into reset
	
	_delay_ms(1000); //(TVP must be held in reset for 5ms after power up)
	
	TVP_RESET(false); //Bring TVP out of reset
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	e6 df       	rcall	.-52     	; 0x60 <TVP_RESET>
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	80 e7       	ldi	r24, 0x70	; 112
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
	//PORTA |= 0x01; //Bring FPGA back out of reset	
	
	_delay_ms(100); //No I2C traffic for 1us after reset is released
	//TVP_PWDN(true); // Put TVP into power down
    
	usiTwiMasterInitialize();
  a6:	27 d0       	rcall	.+78     	; 0xf6 <usiTwiMasterInitialize>
	usiTwiStartTransceiverWithData(reg_setting, 66);
  a8:	62 e4       	ldi	r22, 0x42	; 66
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	31 d0       	rcall	.+98     	; 0x112 <usiTwiStartTransceiverWithData>
    while (1) 
    {
		//_delay_us(0.25);
		PORTB &= ~0x08; //FPGA_FB1 low
  b0:	2b 98       	cbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
		_delay_us(0.130);
		PORTB |= 0x08; //FPGA_FB1 high
  b4:	2b 9a       	sbi	0x05, 3	; 5
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <main+0x44>

000000b8 <usiTwiMasterTransfer>:
)
{

  return errorState;  // Return error state.

} // end usiTwiGetStateInfo
  b8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
  bc:	22 e0       	ldi	r18, 0x02	; 2
  be:	e8 eb       	ldi	r30, 0xB8	; 184
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	9b e2       	ldi	r25, 0x2B	; 43
  c4:	a9 eb       	ldi	r26, 0xB9	; 185
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	82 2f       	mov	r24, r18
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <usiTwiMasterTransfer+0x12>
  ce:	90 83       	st	Z, r25
  d0:	1a 9b       	sbis	0x03, 2	; 3
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <usiTwiMasterTransfer+0x18>
  d4:	82 2f       	mov	r24, r18
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <usiTwiMasterTransfer+0x1e>
  da:	90 83       	st	Z, r25
  dc:	8c 91       	ld	r24, X
  de:	86 ff       	sbrs	r24, 6
  e0:	f3 cf       	rjmp	.-26     	; 0xc8 <usiTwiMasterTransfer+0x10>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <usiTwiMasterTransfer+0x2c>
  e8:	ea eb       	ldi	r30, 0xBA	; 186
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	9f ef       	ldi	r25, 0xFF	; 255
  f0:	90 83       	st	Z, r25
  f2:	20 9a       	sbi	0x04, 0	; 4
  f4:	08 95       	ret

000000f6 <usiTwiMasterInitialize>:
  f6:	28 9a       	sbi	0x05, 0	; 5
  f8:	2a 9a       	sbi	0x05, 2	; 5
  fa:	22 9a       	sbi	0x04, 2	; 4
  fc:	20 9a       	sbi	0x04, 0	; 4
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__EEPROM_REGION_LENGTH__+0x7f00ba>
 104:	8a e2       	ldi	r24, 0x2A	; 42
 106:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__EEPROM_REGION_LENGTH__+0x7f00b8>
 10a:	80 ef       	ldi	r24, 0xF0	; 240
 10c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__EEPROM_REGION_LENGTH__+0x7f00b9>
 110:	08 95       	ret

00000112 <usiTwiStartTransceiverWithData>:
bool
usiTwiStartTransceiverWithData(
  uint8_t *msg,
  uint8_t msgSize
)
{
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
 126:	16 2f       	mov	r17, r22
    // Prepare register value to: Clear flags, and
    ( 1 << USISIF ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC) |
    // set USI to shift 1 bit i.e. count 2 clock edges.
    ( 0xE << USICNT0 );

  errorState = 0;
 128:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
 12c:	98 81       	ld	r25, Y
 12e:	91 70       	andi	r25, 0x01	; 1
 130:	c9 2e       	mov	r12, r25
  // The LSB in the address byte determines if is a masterRead or masterWrite
  // operation.
  masterWriteDataMode = ( *msg & ( 1 << TWI_READ_BIT ) ) ? false : true;

  // Release SCL to ensure that (repeated) Start can be performed
  PORT_USI |= ( 1 << PIN_USI_SCL );
 132:	2a 9a       	sbi	0x05, 2	; 5

  // Verify that SCL becomes high.
  while ( !( PORT_USI & ( 1 << PIN_USI_SCL ) ) );
 134:	2a 9b       	sbis	0x05, 2	; 5
 136:	fe cf       	rjmp	.-4      	; 0x134 <usiTwiStartTransceiverWithData+0x22>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	89 2f       	mov	r24, r25
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <usiTwiStartTransceiverWithData+0x2a>
  // Delay for T2TWI if TWI_STANDARD_MODE
  _delay_loop_1( T2_TWI );
#endif

// Generate Start Condition
  PORT_USI &= ~( 1 << PIN_USI_SDA );  // Force SDA LOW.
 140:	28 98       	cbi	0x05, 0	; 5
 142:	89 2f       	mov	r24, r25
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <usiTwiStartTransceiverWithData+0x32>
  _delay_loop_1( T4_TWI );
  PORT_USI &= ~( 1 << PIN_USI_SCL );  // Pull SCL LOW.
 148:	2a 98       	cbi	0x05, 2	; 5
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <usiTwiStartTransceiverWithData+0x38>
  _delay_loop_1( T4_TWI );
  PORT_USI |= ( 1 << PIN_USI_SDA );   // Release SDA.
 14e:	28 9a       	sbi	0x05, 0	; 5
    // set USI to shift 1 bit i.e. count 2 clock edges.
    ( 0xE << USICNT0 );

  errorState = 0;

  addressMode = true;
 150:	01 e0       	ldi	r16, 0x01	; 1

    if ( addressMode || masterWriteDataMode )
    {
      // Write a byte
      PORT_USI &= ~( 1 << PIN_USI_SCL );          // Pull SCL LOW.
      USIDR = *(msg++);                           // Setup data.
 152:	0f 2e       	mov	r0, r31
 154:	fa eb       	ldi	r31, 0xBA	; 186
 156:	ef 2e       	mov	r14, r31
 158:	f1 2c       	mov	r15, r1
 15a:	f0 2d       	mov	r31, r0

      // Prepare to generate ACK (or NACK in case of End Of Transmission)
      if ( msgSize == 1)
      {
        // Transmission of last byte was performed.
        USIDR = 0xFF;                           // Load NACK to confirm End Of
 15c:	bb 24       	eor	r11, r11
 15e:	ba 94       	dec	r11
 160:	d1 2c       	mov	r13, r1
  do
  {

    // If masterWrite cycle (or inital address tranmission)

    if ( addressMode || masterWriteDataMode )
 162:	01 11       	cpse	r16, r1
 164:	02 c0       	rjmp	.+4      	; 0x16a <usiTwiStartTransceiverWithData+0x58>
 166:	c1 10       	cpse	r12, r1
 168:	14 c0       	rjmp	.+40     	; 0x192 <usiTwiStartTransceiverWithData+0x80>
    {
      // Write a byte
      PORT_USI &= ~( 1 << PIN_USI_SCL );          // Pull SCL LOW.
 16a:	2a 98       	cbi	0x05, 2	; 5
      USIDR = *(msg++);                           // Setup data.
 16c:	88 81       	ld	r24, Y
 16e:	f7 01       	movw	r30, r14
 170:	80 83       	st	Z, r24
      usiTwiMasterTransfer( tempUSISR_8bit );     // Send 8 bits on bus.
 172:	80 ef       	ldi	r24, 0xF0	; 240
 174:	a1 df       	rcall	.-190    	; 0xb8 <usiTwiMasterTransfer>
      
      // Clock and verify (N)ACK from slave
      DDR_USI &= ~( 1 << PIN_USI_SDA );          // Enable SDA as input.
 176:	20 98       	cbi	0x04, 0	; 4
      if ( usiTwiMasterTransfer( tempUSISR_1bit ) & ( 1 << TWI_NACK_BIT ) )
 178:	8e ef       	ldi	r24, 0xFE	; 254
 17a:	9e df       	rcall	.-196    	; 0xb8 <usiTwiMasterTransfer>
 17c:	80 ff       	sbrs	r24, 0
 17e:	16 c0       	rjmp	.+44     	; 0x1ac <usiTwiStartTransceiverWithData+0x9a>
      {
        errorState = addressMode ?
 180:	01 11       	cpse	r16, r1
 182:	02 c0       	rjmp	.+4      	; 0x188 <usiTwiStartTransceiverWithData+0x76>
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	01 c0       	rjmp	.+2      	; 0x18a <usiTwiStartTransceiverWithData+0x78>
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
             USI_TWI_NO_ACK_ON_ADDRESS :
             USI_TWI_NO_ACK_ON_DATA;
        return false;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	1e c0       	rjmp	.+60     	; 0x1ce <usiTwiStartTransceiverWithData+0xbc>

    // Else masterRead cycle
    else
    {
      // Read a data byte
      DDR_USI &= ~( 1 << PIN_USI_SDA );          // Enable SDA as input.
 192:	20 98       	cbi	0x04, 0	; 4
      *(msg++) = usiTwiMasterTransfer( tempUSISR_8bit );
 194:	80 ef       	ldi	r24, 0xF0	; 240
 196:	90 df       	rcall	.-224    	; 0xb8 <usiTwiMasterTransfer>
 198:	88 83       	st	Y, r24

      // Prepare to generate ACK (or NACK in case of End Of Transmission)
      if ( msgSize == 1)
 19a:	11 30       	cpi	r17, 0x01	; 1
 19c:	19 f4       	brne	.+6      	; 0x1a4 <usiTwiStartTransceiverWithData+0x92>
      {
        // Transmission of last byte was performed.
        USIDR = 0xFF;                           // Load NACK to confirm End Of
 19e:	f7 01       	movw	r30, r14
 1a0:	b0 82       	st	Z, r11
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <usiTwiStartTransceiverWithData+0x96>
                                                // Transmission.
      }
      else
      {
        USIDR = 0x00;                          // Load ACK. Set data register
 1a4:	f7 01       	movw	r30, r14
 1a6:	10 82       	st	Z, r1
                                               // bit 7 (output for SDA) low.
      }
      // Generate ACK/NACK.
      usiTwiMasterTransfer( tempUSISR_1bit );
 1a8:	8e ef       	ldi	r24, 0xFE	; 254
 1aa:	86 df       	rcall	.-244    	; 0xb8 <usiTwiMasterTransfer>
    }

  }
  while ( --msgSize );                         // Until all data sent/received.
 1ac:	11 50       	subi	r17, 0x01	; 1
 1ae:	21 96       	adiw	r28, 0x01	; 1
 1b0:	0d 2d       	mov	r16, r13
 1b2:	11 11       	cpse	r17, r1
 1b4:	d6 cf       	rjmp	.-84     	; 0x162 <usiTwiStartTransceiverWithData+0x50>
usiTwiMasterStop(
  void
)
{

  PORT_USI &= ~( 1 << PIN_USI_SDA );              // Pull SDA low.
 1b6:	28 98       	cbi	0x05, 0	; 5
  PORT_USI |= ( 1 << PIN_USI_SCL );               // Release SCL.
 1b8:	2a 9a       	sbi	0x05, 2	; 5
  while ( !( PIN_USI & ( 1 << PIN_USI_SCL ) ) );  // Wait for SCL to go high.
 1ba:	1a 9b       	sbis	0x03, 2	; 3
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <usiTwiStartTransceiverWithData+0xa8>
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	98 2f       	mov	r25, r24
 1c2:	9a 95       	dec	r25
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <usiTwiStartTransceiverWithData+0xb0>
  _delay_loop_1( T4_TWI );
  PORT_USI |= ( 1 << PIN_USI_SDA );               // Release SDA.
 1c6:	28 9a       	sbi	0x05, 0	; 5
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <usiTwiStartTransceiverWithData+0xb6>
  while ( --msgSize );                         // Until all data sent/received.
  
  usiTwiMasterStop( );                         // Send a STOP condition on the TWI bus.

  /* Transmission successfully completed*/
  return true;
 1cc:	81 e0       	ldi	r24, 0x01	; 1

} // end usiTwiStartTransceiverWithData
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	bf 90       	pop	r11
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
